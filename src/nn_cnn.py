#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
This script describe a convolutional network, that will be used to infer the angle and the distance in
the image generated by the lidar data. Note that the label of the images were generated manually with help
of the UI generated by the script lidar_tag.py.  

create a neural network with convolutional layers in Python with the Pytorch framework, the scripts must follow the following instructions:
1. It receives images through a function called "def getData", which obtains through the DataLoader images in a folder on the computer and stores them in a dataframe by the Pandas library. The images are already separated into test and training sets and must be stored in the "test_data" and "train_data" variables. The images are 640 x 480 in size.
2. It must contain a function called "def getLabels", which will get lines from a file with extension ".csv", in which each line is a label of each image obtained by the "getData" function. Images and labels are defined by an already identified id. The Labels are already separated into test and training sets and must be stored in the "test_labels" and "train_labels" variables, corresponding to each image;
3. the classes forming the neural network by itself "class NetworkCNN" , it is composed of 3 convolutional layers, a pooling layer and a dropout layer, with 2 final layers of Fully Connected type (all with forward step);
4. the training function defined by "def fit(model, criterion, optimizer, train_loader, test_loader, num_epochs)" which must iterate through the images of "train_data" and "train_label" applying a step forward, a loss function (by criterion ), a step optimizer and a backward loss, in addition to updating the loss. In addition, the function must assemble a test model, iterating through the test dataset looking for the labels' predictions with a calculated accuracy. The initial image is sized 640 x 480, it must be scaled down;
5. The fit function call must be in the format: model = NetworkCNN(), with the criterion to be defined (cost/loss function), learning rate of 0.001 and Adam optimizer. Finally, the model must be trained and then tested. Number of epochs of 20.

At the end, plot the result of the cost function with the matplotlib library by number of epochs.

@author: andres
@author: Felipe-Tommaselli
"""

import os
import pandas as pd
import torch
import numpy as np
import matplotlib.pyplot as plt
from statistics import mean
#from torchvision.io import read_image
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torch.utils.data import Dataset, DataLoader, random_split

torch.cuda.empty_cache()

from dataloader import *


def getData(img_path, csv_path, batch_size=6, num_workers=0):
    ''' get images from the folder (assets/images) and return a DataLoader object '''
    train_data = DataLoader(LidarDatasetCNN(img_path, csv_path, train=True), batch_size=batch_size, shuffle=True,num_workers=num_workers)
    test_data = DataLoader(LidarDatasetCNN(img_path, csv_path, train=False), batch_size=batch_size, shuffle=True,num_workers=num_workers)

    print('-'*50)
    # print the size of the dataset
    print('Train data size: ', len(train_data))
    print('loader', len(train_data.dataset))

    # print the first batch
    print('next batch:', next(iter(train_data))['image'][0].shape)
    batch = next(iter(train_data))
    images, labels = batch['image'], batch['labels']
    print('labels:', labels)

    # print the dataset    
    for i, data in enumerate(train_data):
        d = (item.type(torch.float32) for item in data)
    print('i: ', i)
    
    # print the first image
    img = images[0]
    plt.imshow(img.numpy().squeeze(), cmap="gray")
    # plt.show()
    print('-'*50)

    return train_data, labels

class NetworkCNN(nn.Module):
    
    def __init__(self):
        super(NetworkCNN, self).__init__()

        # input image: 650x650
        # help: https://medium.com/@nutanbhogendrasharma/pytorch-convolutional-neural-network-with-mnist-dataset-4e8a4265e118


        super(NetworkCNN, self).__init__()
        self.cnn1 = nn.Conv2d(in_channels=1, out_channels= 32, kernel_size=3, stride=1, padding=0)
        self.cnn2 = nn.Conv2d(in_channels=32, out_channels= 64, kernel_size=3, stride=1, padding=0)
        self.cnn3 = nn.Conv2d(in_channels=64, out_channels= 128, kernel_size=3, stride=1, padding=0)
        self.fc1 = nn.Linear(128 * 5 * 5, 128)
        self.fc2 = nn.Linear(128, 5)

    def forward(self, x) -> torch.Tensor:
        x = F.relu(self.cnn1(x)) 
        x = F.max_pool2d(x, kernel_size=3, stride=2)
        x = F.relu(self.cnn2(x))
        x = F.max_pool2d(x, kernel_size=3, stride=1) 
        x = F.relu(self.cnn3(x)) 
        x = F.max_pool2d(x, kernel_size=2, stride=1) 
        x = torch.flatten(x, 1) 
        x = self.fc1(x) 
        x = self.fc2(x)

        return x

def fit(model, criterion, optimizer, train_loader, test_loader, num_epochs):
    model.to(device)

    train_losses = []
    test_losses = []

    accuracy_list = []
    predictions_list = []
    labels_list = []

    for epoch in range(num_epochs):
        running_loss = 0

        for i, data in enumerate(train_loader):
            images, labels = data['image'], data['labels']
            print('images:', images.shape)
            print('labels:', labels)
            
            # convert to float32 and send it to the device
            images = images.type(torch.float32).to(device)
            labels = [item.to(device).type(torch.float32) for item in labels]

            # image dimension: batch x 1 x 650 x 650 (batch, channels, height, width)
            images = images.unsqueeze(1)

            outputs = model(images)
            loss = criterion(outputs, labels) 
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            running_loss += loss.item()

        else:
        # # Testing the model
        #     with torch.no_grad():
        #         # Set the model to evaluation mode
        #         model.eval()

        #         total = 0
        #         test_loss = 0
        #         correct = 0

        #         for images, labels in test_loader:
        #             images = images.to(device)
        #             labels_list.append(labels)
        #             total += len(labels)
        
        #             outputs = model.forward(images) # propagação para frente

        #             predictions = torch.max(outputs, 1)[1].to(device)
        #             predictions_list.append(predictions)
        #             correct += (predictions == labels).sum()

        #             test_loss += criterion(outputs, labels).item()
        #         test_losses.append(test_loss/len(test_loader))

        #         accuracy = correct * 100 / total
        #         accuracy_list.append(accuracy.item())


        #     # Set the model to training mode
        #     model.train()
            pass #! remove this line

        train_losses.append(running_loss/len(train_loader))

        print(f'Epoch {epoch+1}/{num_epochs} .. Train Loss: {train_losses[-1]:.5f} .. Test Loss: {test_losses[-1]:.5f} .. Test Accuracy: {accuracy_list[-1]:.3f}%')

            
    results = {
        'train_losses': train_losses,
        'test_losses': test_losses,
        'accuracy_list': accuracy_list
    }
    
    return results

def plotResults(results):
    plt.plot(results['train_losses'], label='Training loss')
    plt.plot(results['test_losses'], label='Validation loss')
    plt.legend(frameon=False)
    plt.show()

    plt.plot(results['accuracy_list'], label='Accuracy')
    plt.legend(frameon=False)
    plt.show()

if __name__ == '__main__':
    # Set the device to GPU if available
    global device
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    print('Using {} device'.format(device))

    # Get the data
    train_data, labels = getData(img_path="~/Documents/IC_NN_Lidar/assets/classified/image", csv_path="~/Documents/IC_NN_Lidar/assets/tags/Label_Data.csv")

    # Create the model on GPU if available
    model = NetworkCNN().to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

    # Train the model
    #! without test data yet 
    results = fit(model=model, criterion=criterion, optimizer=optimizer, train_loader=train_data, test_loader=train_data, num_epochs=10)

    plotResults(results)

    # Save the model
    torch.save(model.state_dict(), 'model.pth')
    print('Saved PyTorch Model State to model.pth')

    #* not there yet

    # # Load the model
    # model = NetworkCNN()
    # model.load_state_dict(torch.load('model.pth'))

    # # Test the model
    # with torch.no_grad():
    #     # Set the model to evaluation mode
    #     model.eval()

    #     total = 0
    #     correct = 0

    #     for images, labels in test_data:
    #         images, labels = images.to(device), labels.to(device)
    #         outputs = model.forward(images)
    #         predictions = torch.max(outputs, 1)[1].to(device)
    #         correct += (predictions == labels).sum()
    #         total += len(labels)

    #     print(f'Accuracy of the network on the 10000 test images: {correct * 100 / total}%')

    # # Test the model with a single image
    # with torch.no_grad():
    #     # Set the model to evaluation mode
    #     model.eval()

    #     image = test_data[0][0].to(device)
    #     label = test_data[0][1].to(device)

    #     output = model.forward(image)
    #     prediction = torch.max(output, 0)[1].to(device)

    #     print(f'Prediction of the network on the first image: {prediction}')
    #     print(f'Label of the first image: {label}')

    # # plot results of the test
    # plt.imshow(image.cpu().numpy().squeeze(), cmap='gray_r')
    # plt.show()